"""
Django settings for LaatUI project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import sys
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)q-4sro^tyv76)#-sel)bk%+v&-en(wvpvqx=-va&ya%1sl^mg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'django_celery_results',
    'django_celery_beat',
    'django_filters',

    'projects.apps.ProjectsConfig',
    'cases.apps.CasesConfig',
    'reports.apps.ReportsConfig',
    'meninfo.apps.MeninfoConfig',
    'cpus.apps.CpusConfig',
    'dfs.apps.DfsConfig',
    'loads.apps.LoadsConfig',
    'nets.apps.NetsConfig',
    'tops.apps.TopsConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

ROOT_URLCONF = 'LaatUI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LaatUI.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',
        'ENGINE': 'django.db.backends.mysql',
        # 指定数据库名称
        'NAME': 'LaatData',
        # 'NAME': 'LaatUI',
        # 指定数据库用户名
        'USER': 'root',
        # 指定用户密码
        'PASSWORD': 'sxy749860543',
        # 'PASSWORD': 'swz191220',
        # 指定主机
        'HOST': 'localhost',
        # 'HOST': '101.37.30.155',
        # 指定端口
        # 'PORT': 3333
        'PORT': 3306
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-cn'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 允许所有来源访问
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = ['http://127.0.0.1:8000', 'http://localhost:8080']

APPEND_SLASH=False


# celery配置
BROKER_URL = 'redis://101.37.30.155:6379/0'  # 关联redis，存放任务队列
# redis://:password@hostname:port/db_number  如果有密码

# 配置：配置用户存储结果（backend）的库，0代表是redis中的库，redis默认有16个库
CELERY_RESULT_BACKEND = 'redis://101.37.30.155:6379/1'

# 连接超时
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}

# 消息格式
CELERY_ACCEPT_CONNECT = ['application/json']

# 任务的结果的序列化格式
CELERY_TASK_SERIALIZER = 'json'

# 结果的格式以json序列化
CELERY_RESULT_SERIALIZER = 'json'

# celery的时区
CELERY_TIMEZONE = 'Asia/Shanghai'

# celery worker 每次去redis取任务的数量
CELERYD_PREFETCH_MULTIPLIER = 4

# 每个worker最多执行13个任务，避免内存泄漏
CELERYD_MAX_TASKS_PER_CHILD = 12

# 定时任务调度器
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'

# 使用项目数据库存储任务执行结果
CELERY_RESULT_BACKEND = 'django-db'

""" 分页器配置 """
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],  # 过滤、排序
    # 'DEFAULT_PAGINATION_CLASSES': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10,
    'EXCEPTION_HANDLER': 'exception_handle'
}


# django的logging配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            # 实际开发建议使用WARNING
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            # 实际开发建议使用WARNING
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志位置,日志文件名,日志保存目录必须手动创建，注：这里的文件路径要注意BASE_DIR代表的是LaatUI
            'filename': os.path.join(os.path.dirname(BASE_DIR), "LaatUI", "logs", "laatui.log"),
            # 日志文件的最大值,这里我们设置300M
            'maxBytes': 300 * 1024 * 1024,
            # 日志文件的数量,设置最大日志数量为10
            'backupCount': 10,
            # 日志格式:详细格式
            'formatter': 'verbose',
            # 文件内容编码
            'encoding': 'utf-8'
        },
    },
    # 日志对象
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'propagate': True,  # 是否让日志信息继续冒泡给其他的日志处理系统
        },
    }
}